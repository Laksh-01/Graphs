// You are given an m x n grid where each cell can have one of three values:

// 0 representing an empty cell,
// 1 representing a fresh orange, or
// 2 representing a rotten orange.
// Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

// Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

//Input: grid = [[2,1,1],[1,1,0],[0,1,1]]  Output: 4

class Solution {
public:
    
    int orangesRotting(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int count1=0;
        int count2=0;
        vector<vector<int>>visited(n,vector<int>(m,0));
        queue<pair<pair<int,int>,int>>q;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2) {
                    q.push({{i,j},0});
                    visited[i][j]=2;
                }
                else if(grid[i][j]==1){
                    count1++;
                }
            }
        }
        int tm=0;
        while(!q.empty()){
            int r=q.front().first.first;
            int c=q.front().first.second;
            int t=q.front().second;
            q.pop();
            tm=max(tm,t);
            int delrow[]={-1,0,1,0};
            int delcol[]={0,1,0,-1};
            for(int i=0;i<4;i++){
                int newr=r+delrow[i];
                int newc=c+delcol[i];
                if(newr>=0 && newr<n && newc>=0 && newc<m && visited[newr][newc]!=2 && grid[newr][newc]==1){
                    visited[newr][newc]=2;
                    q.push({{newr,newc},t+1});
                    count2++;
                }
                 
            }
        }
        cout<<count1<<endl;
        cout<<count2<<endl;
        if(count2!=count1) return -1;
        return tm;
    }
};